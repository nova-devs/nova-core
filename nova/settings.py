"""
Django settings for nova project.

Generated by 'django-admin startproject' using Django 1.11.20.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from datetime import timedelta
from os import path
from os.path import exists, join

# import saml2
from corsheaders.defaults import default_methods
from cryptography.fernet import Fernet
from dotenv import load_dotenv

CRYPTO_SECRET_KEY = 'kd2hnt0V2zVySVBqxagigGPV_3VIPJnhwP1g5k0KzWY='

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
nova_conf = os.path.join(BASE_DIR, 'nova.conf')

if exists(nova_conf):
    load_dotenv(nova_conf)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vl&z6)xlfv4#iiblk8zw$owk1d10ilh$@(@dz)97dwo*)nn4w!'


def encrypted(password: str):
    global SECRET_KEY
    secret_key = bytes(SECRET_KEY, 'utf-8')
    fernet = Fernet(secret_key)
    return fernet.encrypt(password.encode('utf-8')).decode('utf-8')


def decrypted(encrypted_password):
    global SECRET_KEY
    secret_key = bytes(SECRET_KEY, 'utf-8')
    f = Fernet(secret_key)
    return f.decrypt(bytes(encrypted_password, 'utf-8')).decode('utf-8')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'daphne',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'guardian',
    'rosetta',
    'account.apps.AccountConfig',
    'core.apps.CoreConfig',
    'simple_history',
    # 'django_saml2_auth',
    'drf_yasg'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    # 'account.middleware.JWTTokenAuthMiddleware',
]

ROOT_URLCONF = 'nova.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nova.wsgi.application'
ASGI_APPLICATION = 'nova.asgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS')
    },
}

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic'
        }
    },
    'PERSIST_AUTH': True,
    'SUPPORTED_SUBMIT_METHODS': ['get'],
    'DOC_EXPANSION': 'none',
    'DEFAULT_MODEL_DEPTH': 1,
    'DEFAULT_MODEL_FILTER': '',
    'DEFAULT_OPERATION_ID': 'unknown_operation',
    # 'DEFAULT_AUTO_SCHEMA_CLASS': 'myapp.MyAutoSchema',
    'VALIDATOR_URL': 'http://nova:8080/validator',
    'SWAGGER_UI_SETTINGS': {
        'supportedSubmitMethods': ['get'],
        # 'docExpansion': 'none',
        'jsonEditor': True,
        'defaultModelsExpandDepth': 1,
        'defaultModelExpandDepth': 1,
        'displayRequestDuration': True,
        'showCommonExtensions': True,
    },
}

DATABASE_ROUTERS = ['nova.routers.DatabaseAppsRouter']
DATABASE_APPS_MAPPING = {}
# DATABASE_APPS_MAPPING = {
#     'another_app': 'another_connection',
# }

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Manaus'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (
    path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = join(BASE_DIR, 'assets', 'static')

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = default_methods

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.DjangoModelPermissions',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ),
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.UserRateThrottle'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'user': '100000/day'
    # },
    'COERCE_DECIMAL_TO_STRING': False
}

REDIS_HOST = os.environ.get('REDIS_HOST')
REDIS_PORT = int(os.environ.get('REDIS_PORT'))
REDIS_DSN = f'redis://{REDIS_HOST}:{REDIS_PORT}/0'

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = TIME_ZONE
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_BROKER_URL = REDIS_DSN
CELERY_RESULT_BACKEND = REDIS_DSN
CELERY_IGNORE_RESULT = True

BROKER_POOL_LIMIT = None
BROKER_CONNECTION_RETRY = True
BROKER_CONNECTION_MAX_RETRIES = 0
BROKER_CONNECTION_TIMEOUT = 1

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [
                (REDIS_HOST, REDIS_PORT)
            ],
        },
    },
}

AUTH_USER_MODEL = 'account.User'

DAYS_TO_EXPIRATION = os.environ.get('JWT_EXPIRATION') if os.environ.get('JWT_EXPIRATION') is not None else 9999

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=int(DAYS_TO_EXPIRATION)),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
)

ANONYMOUS_USER_NAME = None

# LOGGING = {
#     'version': 1,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         }
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#         },
#         'django': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#             'propagate': False,
#         },
#         'django.request': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#             'propagate': False,
#         },
#     }
# }

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

SAML2_AUTH = {
    # Metadata is required, choose either remote url or local file path
    'METADATA_AUTO_CONF_URL': os.environ.get('SAML_METADATA_URL'),
    'DEBUG': True,  # Send debug information to a log file
    # Optional settings below
    'DEFAULT_NEXT_URL': '/',
    'CREATE_USER': True,  # Create a new Django user when a new user logs in. Defaults to True.
    'NEW_USER_PROFILE': {
        'USER_GROUPS': [],  # The default group name when a new user logs in
        'ACTIVE_STATUS': True,  # The default active status for new users
        'STAFF_STATUS': False,  # The staff status for new users
        'SUPERUSER_STATUS': False,  # The superuser status for new users
    },
    'ATTRIBUTES_MAP': {  # Change Email/UserName/FirstName/LastName to corresponding SAML2 userprofile attributes.
        'email': 'email',
        'username': 'email',
    },
    'TRIGGER': {
        'CREATE_USER': 'account.utils.create_user',
        'CUSTOM_CREATE_JWT': 'account.utils.get_custom_jwt',
        'CUSTOM_TOKEN_QUERY': 'account.utils.get_custom_token_query',
    },
    'ASSERTION_URL': os.environ.get('SAML_ASSERTION_URL'),  # Custom URL to validate incoming SAML requests against
    'ENTITY_ID': 'Mirmex',  # Populates the Issuer element in authn request
    # Sets the Format property of authn NameIDPolicy element, e.g. 'user.email'
    'USE_JWT': True,
    'JWT_ALGORITHM': 'HS256',  # JWT algorithm to sign the message with
    'JWT_SECRET': 'secret',  # JWT secret to sign the message with
    # 'JWT_EXP': 60,  # JWT expiry time in seconds
    'FRONTEND_URL': os.environ.get('SAML_FRONTEND_URL'),
    'WANT_ASSERTIONS_SIGNED': False,
    'AUTHN_REQUESTS_SIGNED': False,
    'WANT_RESPONSE_SIGNED': False,
    'LOGOUT_REQUESTS_SIGNED': True,  # Require each logout request to be signed
    'ALLOWED_REDIRECT_HOSTS': [os.environ.get('SAML_ALLOWED_HOST_FRONTEND'),
                               os.environ.get('SAML_ALLOWED_HOST_BACKEND')],
    # Allowed hosts to redirect to using the ?next parameter
    'TOKEN_REQUIRED': False,  # Whether or not to require the token parameter in the SAML assertion
}

EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
# EMAIL_USE_SSL = True
